// Generated by CoffeeScript 1.8.0
var alternatingIntervalsToErrors, errorsToAlternatingIntervals,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

alternatingIntervalsToErrors = function(intervals) {
  return concatMap_(splitEvery(2, intervals), function(_arg) {
    var e, ne;
    ne = _arg[0], e = _arg[1];
    return concat([replicate(ne, 0), replicate(e, 1)]);
  });
};

errorsToAlternatingIntervals = function(errors) {
  if (errors[0]) {
    errors.unshift(0);
  }
  return concatMap_(splitEvery(2, group(errors)), function(pair) {
    return map(len, pair);
  });
};

$(function() {
  var defp, epsilon, m, n, p, selector, _i, _len, _ref;
  p = [[.7, .3], [.6, .4]];
  epsilon = .5;
  m = 24;
  n = 3 * Math.pow(10, 5);
  defp = function(descr) {
    var subscript, _base, _base1;
    subscript = descr.subscript;
    if (descr.title == null) {
      descr.title = "p<sub>" + subscript + "</sub>";
    }
    if (descr.valid == null) {
      descr.valid = function(v) {
        return v > 0 && v < 1;
      };
    }
    if (descr.$ == null) {
      descr.$ = {};
    }
    if ((_base = descr.$).min == null) {
      _base.min = Math.pow(10, -5);
    }
    if ((_base1 = descr.$).max == null) {
      _base1.max = 1 - Math.pow(10, -5);
    }
    return config.define(descr);
  };
  defp({
    "default": p[0][1],
    subscript: '01',
    change: function(v) {
      p[0][1] = v;
      return p[0][0] = 1 - v;
    }
  });
  defp({
    "default": p[1][0],
    subscript: '10',
    change: function(v) {
      p[1][0] = v;
      return p[1][1] = 1 - v;
    }
  });
  config.define({
    title: 'Вероятность ошибки в "плохом" состоянии ε',
    "default": epsilon,
    valid: function(v) {
      return v > 0 && v < 1;
    },
    change: function(v) {
      return epsilon = v;
    }
  });
  config.define({
    title: 'Длина последовательности N',
    "default": n,
    valid: function(v) {
      return v > 1;
    },
    change: function(v) {
      return n = v;
    }
  });
  config.define({
    title: 'Длина блока m',
    "default": m,
    valid: function(v) {
      return v > 0;
    },
    change: function(v) {
      return m = v;
    }
  });
  _ref = ['#error-intervals', '#block-intervals'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    selector = _ref[_i];
    $(selector).spinner({
      spin: function() {
        return false;
      }
    });
    $(selector).css('margin-right', '.4em');
    $(selector).parent().children('.ui-spinner-button').remove();
  }
  $('#apply-config').button().click(function() {
    var STATE_ERR, STATE_GOOD, alternatingBlockIntervals, alternatingIntervals, blocks, errBlocksCount, errors, errorsCount, pairs, state, yesno;
    yesno = function(yesprob) {
      return Math.random() <= yesprob;
    };
    errors = [];
    STATE_GOOD = 0;
    STATE_ERR = 1;
    state = STATE_GOOD;
    while (len(errors) < n) {
      switch (state) {
        case STATE_GOOD:
          errors.push(0);
          if (yesno(p[0][1])) {
            state = STATE_ERR;
          }
          break;
        case STATE_ERR:
          errors.push(0 + yesno(epsilon));
          if (yesno(p[1][0])) {
            state = STATE_GOOD;
          }
      }
    }
    alternatingIntervals = errorsToAlternatingIntervals(errors);
    blocks = splitEvery(m, errors);
    alternatingBlockIntervals = errorsToAlternatingIntervals(map_(blocks, function(b) {
      return 0 + (__indexOf.call(b, 1) >= 0);
    }));
    pairs = splitEvery(2, alternatingIntervals);
    errorsCount = sum(map_(pairs, function(p) {
      return p[1];
    }));
    $('#error-intervals').val((map_(pairs, function(pair) {
      return pair.join('/');
    })).join(','));
    $('#error-coeff').text(sprintf('%.3f', errorsCount / n));
    errBlocksCount = len(filter_(blocks, function(b) {
      return __indexOf.call(b, 1) >= 0;
    }));
    $('#grouping-coeff').text(sprintf('%.3f', ((log(errorsCount)) - (log(errBlocksCount))) / (log(m))));
    $('#block-error-coeff').text(sprintf('%.3f', errBlocksCount / (len(blocks))));
    return $('#block-intervals').val((map_(splitEvery(2, alternatingBlockIntervals), function(pair) {
      return pair.join('/');
    })).join(','));
  });
  return $('#apply-config').click();
});

//# sourceMappingURL=main.js.map
