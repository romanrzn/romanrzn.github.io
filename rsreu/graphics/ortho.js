// Generated by CoffeeScript 1.8.0
var main,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

main = function() {
  var Body, Canvas, CanvasOrtho, CanvasPersp, cube, cube_world, distance, i, j, map, octahedron, octahedron_world, op, ortho, orthoCube, perspective, perspectiveCube, reduce, rotate, sum, zip, zipWith;
  op = {
    plus: function(a, b) {
      return a + b;
    },
    minus: function(a, b) {
      return a - b;
    }
  };
  zip = function() {
    var arrays;
    arrays = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return arrays[0].map(function(_, i) {
      return arrays.map(function(a) {
        return a[i];
      });
    });
  };
  zipWith = function() {
    var arrays, f;
    f = arguments[0], arrays = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return (zip.apply(null, arrays)).map(function(a) {
      return f.apply(null, a);
    });
  };
  reduce = function(f, arr) {
    return arr.reduce(f);
  };
  map = function(f, arr) {
    return arr.map(f);
  };
  sum = function(arr) {
    return reduce(op.plus, arr);
  };
  distance = function(p1, p2) {
    return Math.sqrt(sum(map((function(x) {
      return Math.pow(x, 2);
    }), zipWith(op.minus, p1, p2))));
  };
  rotate = function(a, i) {
    if (i == null) {
      i = 1;
    }
    a = a.slice();
    while (i--) {
      a.unshift(a.pop());
    }
    return a;
  };
  Body = (function() {
    function Body(o) {
      this.eye = {
        theta: 0,
        phi: 0,
        rho: 500,
        zoom: 300,
        offsetX: 0,
        offsetY: 0
      };
      this.world = o.world;
      this.edgesIndices = o.edgesIndices;
      this.trianglesIndices = o.trianglesIndices;
    }

    Body.prototype.viewTransform = function() {
      var p;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.world;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          _results.push([this.eye.zoom * (-p[0] * Math.sin(this.eye.theta) + p[1] * Math.cos(this.eye.theta)) + this.eye.offsetX, this.eye.zoom * (-p[0] * Math.cos(this.eye.phi) * Math.cos(this.eye.theta) - p[1] * Math.cos(this.eye.phi) * Math.sin(this.eye.theta) + p[2] * Math.sin(this.eye.phi)) + this.eye.offsetY]);
        }
        return _results;
      }).call(this);
    };

    Body.prototype.screenTransform = function() {
      var p, screen, view;
      view = (function() {
        var _i, _len, _ref, _results;
        _ref = this.world;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          _results.push([-this.eye.zoom * p[0] * Math.sin(this.eye.theta) + this.eye.zoom * p[1] * Math.cos(this.eye.theta), -this.eye.zoom * p[0] * Math.cos(this.eye.phi) * Math.cos(this.eye.theta) - this.eye.zoom * p[1] * Math.cos(this.eye.phi) * Math.sin(this.eye.theta) + this.eye.zoom * p[2] * Math.sin(this.eye.phi), -this.eye.zoom * p[0] * Math.sin(this.eye.phi) * Math.cos(this.eye.theta) - this.eye.zoom * p[1] * Math.sin(this.eye.phi) * Math.sin(this.eye.theta) - this.eye.zoom * p[2] * Math.cos(this.eye.phi) + this.eye.rho]);
        }
        return _results;
      }).call(this);
      screen = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = view.length; _i < _len; _i++) {
          p = view[_i];
          _results.push([this.eye.offsetX + this.eye.zoom * p[0] / p[2], this.eye.offsetY + this.eye.zoom * p[1] / p[2]]);
        }
        return _results;
      }).call(this);
      return screen;
    };

    return Body;

  })();
  octahedron_world = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i <= 5; i = ++_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; _j <= 2; j = ++_j) {
          _results1.push((Math.pow(-1., i)) * (j === (Math.floor(i / 2))));
        }
        return _results1;
      })());
    }
    return _results;
  })();
  octahedron = new Body({
    world: octahedron_world,
    edgesIndices: (function(_this) {
      return function() {
        var i1, i2, ixs, p1, p2;
        ixs = [];
        for (i1 in octahedron_world) {
          p1 = octahedron_world[i1];
          for (i2 in octahedron_world) {
            p2 = octahedron_world[i2];
            if (i1 === i2) {
              continue;
            }
            if (distance(p1, p2) > (Math.sqrt(2) + 0.01)) {
              continue;
            }
            ixs.push([i1, i2]);
          }
        }
        return ixs;
      };
    })(this)(),
    trianglesIndices: (function(_this) {
      return function() {
        var i1, i2, ixs, triangles, w, _i, _len, _ref, _ref1;
        w = octahedron_world;
        triangles = [];
        ixs = [2, 4, 3, 5];
        _ref = zip(ixs, rotate(ixs));
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], i1 = _ref1[0], i2 = _ref1[1];
          triangles.push([i1, i2, 0]);
          triangles.push([i1, i2, 1]);
        }
        return triangles;
      };
    })(this)()
  });
  cube_world = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i <= 7; i = ++_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; _j <= 2; j = ++_j) {
          _results1.push(Math.pow(-1., (i >> j) & 1) * .5);
        }
        return _results1;
      })());
    }
    return _results;
  })();
  cube = new Body({
    world: cube_world,
    edgesIndices: (function(_this) {
      return function() {
        var i1, i2, ixs, p1, p2;
        ixs = [];
        for (i1 in cube_world) {
          p1 = cube_world[i1];
          for (i2 in cube_world) {
            p2 = cube_world[i2];
            if (i1 === i2) {
              continue;
            }
            if (distance(p1, p2) > (1 + 0.01)) {
              continue;
            }
            ixs.push([i1, i2]);
          }
        }
        return ixs;
      };
    })(this)(),
    trianglesIndices: (function(_this) {
      return function() {
        var i1, i2, i3, i3r, inc, ixs, ixs_, ixsr, rot, triangles, w, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
        w = cube_world;
        triangles = [];
        ixs = [0, 1, 3, 2];
        ixsr = rotate(ixs);
        _ref = zip(ixs, ixsr, map((function(i) {
          return i + 4;
        }), ixs), map((function(i) {
          return i + 4;
        }), ixsr));
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], i1 = _ref1[0], i2 = _ref1[1], i3 = _ref1[2], i3r = _ref1[3];
          triangles.push([i1, i2, i3]);
          triangles.push([i1 + 4, i2 + 4, i3r - 4]);
        }
        _ref2 = [0, 4];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          inc = _ref2[_j];
          _ref3 = [0, 2];
          for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
            rot = _ref3[_k];
            ixs_ = rotate(ixs, rot);
            ixs_ = map((function(i) {
              return i + inc;
            }), ixs_);
            triangles.push(ixs_.slice(0, 3));
          }
        }
        return triangles;
      };
    })(this)()
  });
  Canvas = (function() {
    function Canvas(body, id) {
      this.body = body;
      this.modes = ['rotate', 'zoom', 'move'];
      this.$ = $('#' + id);
      this.w = this.$.width();
      this.h = this.$.height();
      this.$.addLayer({
        type: 'function',
        name: 'body',
        fn: (function(_this) {
          return function(ctx) {
            var i1, i2, i3, points, x1, x2, x3, y1, y2, y3, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _results;
            ctx.lineWidth = 1;
            ctx.globalAlpha = 1;
            ctx.strokeStyle = 'white';
            ctx.fillStyle = 'black';
            points = _this.transform();
            _ref = _this.body.trianglesIndices;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              _ref1 = _ref[_i], i1 = _ref1[0], i2 = _ref1[1], i3 = _ref1[2];
              _ref2 = map(Math.round, points[i1]), x1 = _ref2[0], y1 = _ref2[1];
              _ref3 = map(Math.round, points[i2]), x2 = _ref3[0], y2 = _ref3[1];
              _ref4 = map(Math.round, points[i3]), x3 = _ref4[0], y3 = _ref4[1];
              ctx.beginPath();
              ctx.moveTo(x1 + _this.w / 2 + .5, y1 + _this.h / 2 + .5);
              ctx.lineTo(x2 + _this.w / 2 + .5, y2 + _this.h / 2 + .5);
              ctx.lineTo(x3 + _this.w / 2 + .5, y3 + _this.h / 2 + .5);
              ctx.fill();
            }
            _ref5 = _this.body.edgesIndices;
            _results = [];
            for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
              _ref6 = _ref5[_j], i1 = _ref6[0], i2 = _ref6[1];
              _ref7 = map(Math.round, points[i1]), x1 = _ref7[0], y1 = _ref7[1];
              _ref8 = map(Math.round, points[i2]), x2 = _ref8[0], y2 = _ref8[1];
              ctx.beginPath();
              ctx.moveTo(x1 + _this.w / 2 + .5, y1 + _this.h / 2 + .5);
              ctx.lineTo(x2 + _this.w / 2 + .5, y2 + _this.h / 2 + .5);
              _results.push(ctx.stroke());
            }
            return _results;
          };
        })(this)
      });
      this.initCoordinatesLayer();
      this.initEvents();
      this.$.drawLayers();
    }

    Canvas.prototype.initEvents = function() {
      var leftDown, middleDown;
      leftDown = false;
      middleDown = false;
      this.$.on('mousemove', (function(_this) {
        return function(e) {
          var x, y;
          x = Math.round(e.pageX - _this.$.offset().left);
          y = Math.round(e.pageY - _this.$.offset().top);
          switch (_this.modes[0]) {
            case 'zoom':
              _this.body.eye.rho = 400 + 200 * y / _this.h;
              _this.body.eye.zoom = 200 + 200 * Math.max(2 * x / _this.w, 0.1);
              break;
            case 'move':
              _this.body.eye.offsetX = x - _this.$.width() / 2;
              _this.body.eye.offsetY = y - _this.$.height() / 2;
              break;
            case 'rotate':
              _this.body.eye.theta = Math.PI * x / _this.w;
              _this.body.eye.phi = 2 * Math.PI * y / _this.h;
          }
          return _this.$.drawLayers();
        };
      })(this));
      return this.$.on('click', (function(_this) {
        return function(e) {
          return _this.modes = rotate(_this.modes);
        };
      })(this));
    };

    return Canvas;

  })();
  CanvasOrtho = (function(_super) {
    __extends(CanvasOrtho, _super);

    function CanvasOrtho() {
      return CanvasOrtho.__super__.constructor.apply(this, arguments);
    }

    CanvasOrtho.prototype.transform = function() {
      return this.body.viewTransform();
    };

    CanvasOrtho.prototype.initCoordinatesLayer = function() {
      return this.$.addLayer({
        type: 'function',
        name: 'coords',
        fn: (function(_this) {
          return function(ctx) {
            ctx.globalAlpha = .6;
            ctx.font = 'normal 1em Arial';
            ctx.textAlign = 'right';
            ctx.textBaseline = 'top';
            ctx.fillStyle = 'black';
            ctx.strokeStyle = 'black';
            return ctx.fillText("" + _this.modes[0] + " θ = " + (_this.body.eye.theta.toFixed(3)) + " φ = " + (_this.body.eye.phi.toFixed(3)), _this.w - 8, 8);
          };
        })(this)
      });
    };

    return CanvasOrtho;

  })(Canvas);
  ortho = new CanvasOrtho(octahedron, 'ortho-canvas');
  orthoCube = new CanvasOrtho(cube, 'ortho-cube-canvas');
  CanvasPersp = (function(_super) {
    __extends(CanvasPersp, _super);

    function CanvasPersp() {
      return CanvasPersp.__super__.constructor.apply(this, arguments);
    }

    CanvasPersp.prototype.transform = function() {
      return this.body.screenTransform();
    };

    CanvasPersp.prototype.initCoordinatesLayer = function() {
      return this.$.addLayer({
        type: 'function',
        name: 'coords',
        fn: (function(_this) {
          return function(ctx) {
            ctx.globalAlpha = .6;
            ctx.font = 'normal 1em Arial';
            ctx.textAlign = 'right';
            ctx.textBaseline = 'top';
            ctx.fillStyle = 'black';
            ctx.strokeStyle = 'black';
            return ctx.fillText("" + _this.modes[0] + " θ = " + (_this.body.eye.theta.toFixed(3)) + " φ = " + (_this.body.eye.phi.toFixed(3)) + " ρ = " + (_this.body.eye.rho.toFixed(3)) + " d = " + (_this.body.eye.zoom.toFixed(3)), _this.w - 8, 8);
          };
        })(this)
      });
    };

    return CanvasPersp;

  })(Canvas);
  perspective = new CanvasPersp(octahedron, 'persp-canvas');
  return perspectiveCube = new CanvasPersp(cube, 'persp-cube-canvas');
};

$(main);

//# sourceMappingURL=ortho.js.map
